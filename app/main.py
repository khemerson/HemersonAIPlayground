# app/main.py
"""Application PlaygroundV1 HemersonAIBuild"""

import chainlit as cl
from loguru import logger

@cl.on_chat_start
async def on_chat_start():
    await cl.Message(content="üöÄ PlaygroundV1 Test").send()

@cl.on_message
async def on_message(message: cl.Message):
    await cl.Message(content=f"Echo: {message.content}").send()

if __name__ == "__main__":
    logger.info("üöÄ D√©marrage PlaygroundV1")

# app/main.py - Ajouts pour l'analyse d'images

# Ajouter ces imports
from components.vision_interface import vision_interface
from services.vision.pixtral_service import pixtral_service

# Ajouter dans handle_file_uploads
async def handle_image_analysis(element: cl.File, prompt: str = None):
    """Analyse d'image avec Pixtral - Int√©gration compl√®te"""
    try:
        # Convertir cl.File en cl.Image si n√©cessaire
        image_element = cl.Image(
            name=element.name,
            content=element.content,
            display="inline"
        )
        
        # D√©terminer le type d'analyse selon le prompt
        analysis_type = "comprehensive"  # Par d√©faut
        
        if prompt:
            prompt_lower = prompt.lower()
            if any(keyword in prompt_lower for keyword in ['technique', 'technical', 'qualit√©', 'r√©solution']):
                analysis_type = "technical"
            elif any(keyword in prompt_lower for keyword in ['cr√©atif', 'artistique', 'style', 'art']):
                analysis_type = "creative"
            elif any(keyword in prompt_lower for keyword in ['document', 'texte', 'lecture', 'extraction']):
                analysis_type = "document"
        
        # Lancer l'analyse
        await vision_interface.handle_image_upload(
            image_element, 
            prompt, 
            analysis_type
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur analyse image: {e}")
        await cl.Message(
            content=f"‚ùå **Erreur d'analyse d'image** : {str(e)}"
        ).send()

# Ajouter ces actions dans on_chat_start
actions.extend([
    cl.Action(
        name="image_analysis_demo",
        label="üñºÔ∏è Demo Analyse Image",
        description="D√©monstration des capacit√©s d'analyse d'images",
        icon="üñºÔ∏è"
    ),
    cl.Action(
        name="vision_metrics",
        label="üìä M√©triques Vision", 
        description="Statistiques d'analyse d'images",
        icon="üìä"
    )
])

# Ajouter les handlers d'actions
@cl.action_callback("image_analysis_demo")
async def on_image_analysis_demo(action: cl.Action):
    """D√©monstration des capacit√©s d'analyse d'images"""
    try:
        demo_content = """
üñºÔ∏è **D√©monstration Analyse d'Images avec Pixtral**

## üöÄ Capacit√©s Disponibles

### üìä **Analyse Compl√®te** (Recommand√©e)
- Description d√©taill√©e de tous les √©l√©ments
- Composition, couleurs, style artistique
- Contexte et signification
- Observations techniques et cr√©atives

### üîß **Analyse Technique**
- Qualit√© et r√©solution de l'image
- Technique de cr√©ation (photo, rendu, dessin)
- Aspects techniques remarquables
- Suggestions d'optimisation

### üé® **Analyse Cr√©ative**
- Approche artistique et esth√©tique
- Style et influences cr√©atives
- Potentiel d'am√©lioration artistique
- Inspiration et r√©f√©rences

### üìÑ **Analyse Document**
- Extraction d'informations textuelles
- Structure et mise en page
- Optimisation pour OCR
- Contenu informatif structur√©

## üì§ Comment Utiliser

1. **Glissez-d√©posez** une image dans le chat
2. **Ajoutez un prompt** (optionnel) pour guider l'analyse
3. **Attendez l'analyse** automatique avec Pixtral 12B
4. **Explorez** les r√©sultats d√©taill√©s avec m√©triques

## üéØ Formats Support√©s
- **Images** : JPEG, PNG, WEBP, GIF, BMP
- **Taille max** : 25MB par image
- **R√©solution** : Optimale jusqu'√† 2048x2048
- **Multi-images** : Jusqu'√† 4 images simultan√©ment

## ‚ö° Performances
- **GPU** : RTX 4090 (192.168.1.212)
- **Mod√®le** : Pixtral 12B Multimodal
- **Cache** : Intelligent pour r√©ponses rapides
- **Temps** : ~5-15s selon complexit√©

---
**üí° Conseil** : Uploadez une image pour commencer !
"""
        
        await cl.Message(content=demo_content).send()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur demo analyse: {e}")

@cl.action_callback("vision_metrics")
async def on_vision_metrics(action: cl.Action):
    """Affiche les m√©triques d'analyse d'images"""
    try:
        # R√©cup√©rer les m√©triques
        metrics = await pixtral_service.get_vision_metrics()
        
        report = f"""
üìä **M√©triques Analyse d'Images - Pixtral**

## üìà Statistiques Globales
- **Images analys√©es** : {metrics['images_analyzed']}
- **Analyses r√©ussies** : {metrics['successful_analyses']}
- **Taux de succ√®s** : {metrics['success_rate_percent']:.1f}%
- **Cache hit rate** : {metrics['cache_hit_rate_percent']:.1f}%

## ‚ö° Performance
- **Temps pr√©paration moyen** : {metrics['preprocessing_time_avg']:.2f}s
- **Temps analyse moyen** : {metrics['analysis_time_avg']:.2f}s
- **R√©solution moyenne** : {metrics['avg_image_resolution'] / 1000000:.1f} MP

## üìä Distribution Formats
- **Format le plus utilis√©** : {metrics.get('most_common_format', 'N/A')}
- **Formats trait√©s** : {', '.join(metrics['format_distributions'].keys()) if metrics['format_distributions'] else 'Aucun'}

## üñ•Ô∏è Infrastructure
- **Mod√®le** : Pixtral 12B Multimodal  
- **GPU** : RTX 4090 (192.168.1.212)
- **Cache** : Redis intelligent
- **Optimisations** : Activ√©es

---
*M√©triques en temps r√©el depuis le d√©marrage*
"""
        
        await cl.Message(content=report).send()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur m√©triques vision: {e}")
        await cl.Message(
            content="‚ùå Erreur lors de la r√©cup√©ration des m√©triques vision."
        ).send()

# app/main.py - Ajouts pour la g√©n√©ration d'images

# Ajouter ces imports
from components.image_generation_interface import image_gen_interface
from services.image_generation.comfyui_service import comfyui_service

# Ajouter dans on_chat_start
actions.extend([
    cl.Action(
        name="generate_image",
        label="üé® G√©n√©rer Image",
        description="Cr√©er une image avec ComfyUI",
        icon="üé®"
    ),
    cl.Action(
        name="image_gallery",
        label="üñºÔ∏è Galerie Exemples",
        description="Voir des exemples de g√©n√©ration",
        icon="üñºÔ∏è"
    ),
    cl.Action(
        name="comfyui_metrics",
        label="üìä M√©triques ComfyUI",
        description="Statistiques de g√©n√©ration",
        icon="üìä"
    )
])

# Ajouter les handlers d'actions
@cl.action_callback("generate_image")
async def on_generate_image(action: cl.Action):
    """G√©n√©ration d'image avec ComfyUI"""
    try:
        await image_gen_interface.handle_image_generation_request()
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration image: {e}")
        await cl.Message(
            content=f"‚ùå **Erreur g√©n√©ration d'image** : {str(e)}"
        ).send()

@cl.action_callback("image_gallery")
async def on_image_gallery(action: cl.Action):
    """Galerie d'exemples de g√©n√©ration"""
    try:
        await image_gen_interface.show_generation_gallery()
    except Exception as e:
        logger.error(f"‚ùå Erreur galerie: {e}")

@cl.action_callback("comfyui_metrics")
async def on_comfyui_metrics(action: cl.Action):
    """M√©triques de g√©n√©ration ComfyUI"""
    try:
        # R√©cup√©rer les m√©triques
        metrics = await comfyui_service.get_generation_metrics()
        available_models = await comfyui_service.get_available_models()
        
        report = f"""
üé® **M√©triques ComfyUI - G√©n√©ration d'Images**

## üìä Statistiques Globales
- **Images g√©n√©r√©es** : {metrics['images_generated']}
- **G√©n√©rations r√©ussies** : {metrics['successful_generations']}
- **Taux de succ√®s** : {metrics['success_rate_percent']:.1f}%
- **Cache hit rate** : {metrics['cache_hit_rate_percent']:.1f}%

## ‚ö° Performance
- **Temps moyen de g√©n√©ration** : {metrics['average_generation_time']:.2f}s
- **Temps total** : {metrics['total_generation_time'] / 60:.1f} minutes
- **Efficacit√© vs estimation** : {metrics['efficiency_metrics']['avg_time_vs_estimated']:.1f}x

## üõ†Ô∏è Utilisation
- **Workflow le plus utilis√©** : {metrics['most_used_workflow'].title()}
- **Style le plus populaire** : {metrics['most_popular_style'].title()}

## üìà Distribution Workflows
"""
        
        for workflow, count in metrics.get('workflow_usage', {}).items():
            percentage = (count / max(metrics['images_generated'], 1)) * 100
            report += f"- **{workflow.title()}** : {count} ({percentage:.1f}%)\n"
        
        report += "\n## üé® Styles Populaires\n"
        for style, count in metrics.get('popular_styles', {}).items():
            percentage = (count / max(metrics['images_generated'], 1)) * 100
            report += f"- **{style.title()}** : {count} ({percentage:.1f}%)\n"
        
        report += f"""
## üñ•Ô∏è Infrastructure
- **GPU** : {metrics['efficiency_metrics']['gpu_utilization']}
- **Mod√®les disponibles** : {len(available_models.get('models', {}).get('checkpoints', []))}
- **Workflows disponibles** : {len(available_models.get('workflows', []))}
- **Styles disponibles** : {len(available_models.get('styles', []))}

---
*M√©triques en temps r√©el depuis le d√©marrage*
"""
        
        await cl.Message(content=report).send()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur m√©triques ComfyUI: {e}")
        await cl.Message(
            content="‚ùå Erreur lors de la r√©cup√©ration des m√©triques ComfyUI."
        ).send()

# Handlers pour les actions de workflow
@cl.action_callback("generate_standard")
async def on_generate_standard(action: cl.Action):
    """G√©n√©ration avec workflow standard"""
    try:
        data = action.value
        await image_gen_interface.handle_workflow_selection(
            workflow="standard",
            prompt=data["prompt"],
            style="artistic"
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration standard: {e}")

@cl.action_callback("generate_quality")
async def on_generate_quality(action: cl.Action):
    """G√©n√©ration avec workflow qualit√©"""
    try:
        data = action.value
        await image_gen_interface.handle_workflow_selection(
            workflow="quality",
            prompt=data["prompt"],
            style="artistic"
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration qualit√©: {e}")

@cl.action_callback("generate_speed")
async def on_generate_speed(action: cl.Action):
    """G√©n√©ration avec workflow rapide"""
    try:
        data = action.value
        await image_gen_interface.handle_workflow_selection(
            workflow="speed",
            prompt=data["prompt"],
            style="artistic"
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration rapide: {e}")

@cl.action_callback("generate_artistic")
async def on_generate_artistic(action: cl.Action):
    """G√©n√©ration avec workflow artistique"""
    try:
        data = action.value
        await image_gen_interface.handle_workflow_selection(
            workflow="artistic",
            prompt=data["prompt"],
            style="artistic"
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration artistique: {e}")

@cl.action_callback("generate_portrait")
async def on_generate_portrait(action: cl.Action):
    """G√©n√©ration avec workflow portrait"""
    try:
        data = action.value
        await image_gen_interface.handle_workflow_selection(
            workflow="portrait",
            prompt=data["prompt"],
            style="realistic"
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration portrait: {e}")
