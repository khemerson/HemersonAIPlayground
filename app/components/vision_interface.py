# app/components/vision_interface.py
"""
Interface Chainlit pour analyse d'images avec Pixtral
Optimis√©e pour UX et gestion avanc√©e des images
"""

import chainlit as cl
from typing import Dict, Any, Optional, List
import time
import asyncio
from PIL import Image
import io

from services.vision.pixtral_service import pixtral_service

class VisionInterface:
    """Interface Chainlit pour l'analyse d'images"""
    
    def __init__(self):
        self.supported_analysis_types = {
            "comprehensive": {
                "name": "üìä Analyse Compl√®te",
                "description": "Analyse d√©taill√©e et structur√©e",
                "icon": "üìä"
            },
            "technical": {
                "name": "üîß Analyse Technique", 
                "description": "Focus sur les aspects techniques",
                "icon": "üîß"
            },
            "creative": {
                "name": "üé® Analyse Cr√©ative",
                "description": "Approche artistique et cr√©ative", 
                "icon": "üé®"
            },
            "document": {
                "name": "üìÑ Analyse Document",
                "description": "Extraction d'informations textuelles",
                "icon": "üìÑ"
            }
        }
    
    async def handle_image_upload(self, 
                                 image_element: cl.Image, 
                                 user_prompt: str = None,
                                 analysis_type: str = "comprehensive"):
        """
        Traite une image upload√©e avec interface progressive
        
        Args:
            image_element: √âl√©ment image Chainlit
            user_prompt: Prompt utilisateur personnalis√©
            analysis_type: Type d'analyse √† effectuer
        """
        try:
            # Validation pr√©liminaire
            if not self._validate_image_element(image_element):
                await cl.Message(
                    content="‚ùå **Image invalide**\n\nFormats support√©s : JPEG, PNG, WEBP, GIF, BMP\nTaille max : 25MB\nR√©solution max recommand√©e : 2048x2048"
                ).send()
                return
            
            # D√©terminer le prompt d'analyse
            if not user_prompt:
                user_prompt = self._generate_default_prompt(analysis_type, image_element.name)
            
            # Interface de progression avec √©tapes d√©taill√©es
            progress_message = await cl.Message(
                content=f"üñºÔ∏è **Analyse d'Image D√©marr√©e**\n\n**Image** : {image_element.name}\n**Type** : {self.supported_analysis_types[analysis_type]['name']}\n**Statut** : Initialisation..."
            ).send()
            
            # √âtape 1 : Pr√©paration
            await progress_message.update(
                content=f"üñºÔ∏è **Analyse d'Image en Cours**\n\n**Image** : {image_element.name}\n**Type** : {self.supported_analysis_types[analysis_type]['name']}\n\n1Ô∏è‚É£ **Pr√©paration** : Validation et optimisation...\n2Ô∏è‚É£ **Analyse** : En attente\n3Ô∏è‚É£ **Finalisation** : En attente"
            )
            
            # √âtape 2 : Analyse avec Pixtral
            await progress_message.update(
                content=f"üñºÔ∏è **Analyse d'Image en Cours**\n\n**Image** : {image_element.name}\n**Type** : {self.supported_analysis_types[analysis_type]['name']}\n\n1Ô∏è‚É£ **Pr√©paration** : ‚úÖ Termin√©e\n2Ô∏è‚É£ **Analyse** : üîÑ Analyse Pixtral en cours...\n3Ô∏è‚É£ **Finalisation** : En attente"
            )
            
            # Lancer l'analyse Pixtral
            result = await pixtral_service.analyze_image(
                image_data=image_element.content,
                filename=image_element.name,
                prompt=user_prompt,
                analysis_type=analysis_type,
                optimization_level="balanced"
            )
            
            if result["success"]:
                await self._display_successful_analysis(result, progress_message, image_element)
            else:
                await self._display_analysis_error(result, progress_message, image_element)
                
        except Exception as e:
            await cl.Message(
                content=f"‚ùå **Erreur Analyse d'Image**\n\n{str(e)}\n\nVeuillez r√©essayer avec une autre image."
            ).send()
    
    async def _display_successful_analysis(self, 
                                          result: Dict[str, Any], 
                                          progress_message: cl.Message,
                                          image_element: cl.Image):
        """Affiche le r√©sultat d'une analyse r√©ussie"""
        
        # Extraire les informations
        analysis = result["analysis"]
        metadata = result["metadata"]
        processing_times = result["processing_times"]
        
        # Message de succ√®s avec analyse compl√®te
        success_content = f"""
üéâ **Analyse d'Image Termin√©e avec Succ√®s !**

## üñºÔ∏è Image Analys√©e
**Fichier** : {metadata['filename']}
**R√©solution originale** : {metadata['image_metadata']['original_size'][0]}x{metadata['image_metadata']['original_size'][1]}
**Format** : {metadata['image_metadata']['original_format']}
**Taille** : {metadata['image_metadata']['original_bytes'] / 1024:.1f} KB

## üß† Analyse Pixtral ({result['analysis_type']})

{analysis}

---

## ‚ö° M√©triques de Performance
**Temps de pr√©paration** : {processing_times['preprocessing']:.2f}s
**Temps d'analyse** : {processing_times['analysis']:.2f}s
**Temps total** : {processing_times['total']:.2f}s
**Tokens utilis√©s** : {metadata['tokens_used']}
**Qualit√© d'analyse** : {metadata['analysis_quality']['quality_label'].title()}

## üîß Informations Techniques
**Mod√®le** : {result['model']}
**GPU** : {result['gpu']}
**Optimisation** : {metadata['image_metadata']['optimization_level'].title()}
**Ratio compression** : {metadata['image_metadata'].get('compression_ratio', 1.0):.1f}x
"""
        
        # Mettre √† jour le message de progression
        await progress_message.update(content=success_content)
        
        # Proposer des analyses suppl√©mentaires
        if result["analysis_type"].lower() != "comprehensive":
            await self._suggest_additional_analyses(image_element, result["analysis_type"])
    
    async def _display_analysis_error(self, 
                                     result: Dict[str, Any], 
                                     progress_message: cl.Message,
                                     image_element: cl.Image):
        """Affiche les erreurs d'analyse avec diagnostic"""
        
        processing_times = result.get("processing_times", {})
        
        error_content = f"""
‚ùå **Erreur Analyse d'Image**

**Image** : {image_element.name}
**Erreur** : {result.get('error', 'Erreur inconnue')}
**Temps √©coul√©** : {processing_times.get('total', 0):.2f}s

## üîç Diagnostic
L'analyse d'image a √©chou√©. Causes possibles :
- Service Pixtral temporairement indisponible
- Image dans un format non optimal
- Contenu d'image trop complexe pour l'analyse
- Probl√®me de r√©seau temporaire

**üîß Solutions** :
1. **R√©essayez** dans quelques instants
2. **Optimisez l'image** : r√©duisez la taille si > 10MB
3. **Changez le format** : pr√©f√©rez JPEG ou PNG
4. **Simplifiez le prompt** si tr√®s sp√©cialis√©

**üí° Conseil** : Les images nettes avec un bon contraste donnent de meilleurs r√©sultats.
"""
        
        await progress_message.update(content=error_content)
    
    async def _suggest_additional_analyses(self, image_element: cl.Image, current_type: str):
        """Sugg√®re des analyses compl√©mentaires"""
        
        # Analyses compl√©mentaires sugg√©r√©es
        suggestions = []
        for analysis_type, info in self.supported_analysis_types.items():
            if analysis_type != current_type.lower():
                suggestions.append(
                    cl.Action(
                        name=f"analyze_{analysis_type}",
                        label=info["name"],
                        description=info["description"],
                        icon=info["icon"]
                    )
                )
        
        if suggestions:
            await cl.Message(
                content="üí° **Analyses Compl√©mentaires Disponibles**\n\nVoulez-vous analyser cette image sous un autre angle ?",
                actions=suggestions[:3]  # Limiter √† 3 suggestions
            ).send()
    
    async def handle_multi_image_analysis(self, image_elements: List[cl.Image], comparison_prompt: str = None):
        """
        Analyse et comparaison de multiple images
        
        Args:
            image_elements: Liste d'√©l√©ments images
            comparison_prompt: Prompt de comparaison
        """
        try:
            if len(image_elements) > 4:
                await cl.Message(
                    content="‚ùå **Trop d'images**\n\nMaximum 4 images simultan√©ment pour l'analyse comparative."
                ).send()
                return
            
            # Prompt par d√©faut pour comparaison
            if not comparison_prompt:
                comparison_prompt = "Compare ces images et identifie les similitudes, diff√©rences et √©l√©ments remarquables."
            
            # Message de progression
            progress_message = await cl.Message(
                content=f"üñºÔ∏è **Analyse Multi-Images**\n\n**Images** : {len(image_elements)}\n**Statut** : Analyse en cours..."
            ).send()
            
            # Analyser chaque image en parall√®le
            analysis_tasks = []
            for i, img_element in enumerate(image_elements):
                task = pixtral_service.analyze_image(
                    image_data=img_element.content,
                    filename=f"{img_element.name} (Image {i+1})",
                    prompt=f"Image {i+1}/|{len(image_elements)}: {comparison_prompt}",
                    analysis_type="comprehensive"
                )
                analysis_tasks.append(task)
            
            # Ex√©cuter les analyses en parall√®le
            results = await asyncio.gather(*analysis_tasks, return_exceptions=True)
            
            # Traiter les r√©sultats
            successful_analyses = []
            failed_analyses = []
            
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    failed_analyses.append(f"Image {i+1}: {str(result)}")
                elif result.get("success", False):
                    successful_analyses.append({
                        "index": i+1,
                        "filename": image_elements[i].name,
                        "analysis": result["analysis"]
                    })
                else:
                    failed_analyses.append(f"Image {i+1}: {result.get('error', 'Erreur inconnue')}")
            
            # Construire le rapport comparatif
            if successful_analyses:
                comparison_report = self._build_comparison_report(successful_analyses, comparison_prompt)
                await progress_message.update(content=comparison_report)
            else:
                await progress_message.update(
                    content="‚ùå **√âchec Analyse Multi-Images**\n\nAucune image n'a pu √™tre analys√©e avec succ√®s."
                )
                
        except Exception as e:
            await cl.Message(
                content=f"‚ùå **Erreur Analyse Multi-Images**\n\n{str(e)}"
            ).send()
    
    def _build_comparison_report(self, analyses: List[Dict], prompt: str) -> str:
        """Construit un rapport comparatif des analyses"""
        
        report = f"""
üéØ **Analyse Multi-Images Termin√©e**

**Prompt de comparaison** : {prompt}
**Images analys√©es** : {len(analyses)}

---

"""
        
        # Analyses individuelles
        for analysis in analyses:
            report += f"""
## üñºÔ∏è Image {analysis['index']} - {analysis['filename']}

{analysis['analysis']}

---
"""
        
        # Synth√®se comparative (basique)
        report += f"""
## üìä Synth√®se Comparative

**Nombre d'images trait√©es** : {len(analyses)}
**Analyses r√©ussies** : {len(analyses)}
**Mod√®le utilis√©** : Pixtral 12B

üí° **Note** : Pour des comparaisons plus approfondies, utilisez l'analyse individuelle de chaque image puis demandez une synth√®se manuelle.
"""
        
        return report
    
    def _validate_image_element(self, image_element: cl.Image) -> bool:
        """Valide un √©l√©ment image Chainlit"""
        try:
            # V√©rifier la pr√©sence du contenu
            if not hasattr(image_element, 'content') or not image_element.content:
                return False
            
            # V√©rifier la taille
            if len(image_element.content) > 25 * 1024 * 1024:  # 25MB
                return False
            
            # V√©rifier qu'on peut ouvrir l'image
            try:
                with Image.open(io.BytesIO(image_element.content)) as img:
                    # V√©rification basique
                    if img.size[0] < 10 or img.size[1] < 10:  # Trop petite
                        return False
                    return True
            except:
                return False
                
        except Exception:
            return False
    
    def _generate_default_prompt(self, analysis_type: str, filename: str) -> str:
        """G√©n√®re un prompt par d√©faut selon le type d'analyse"""
        
        default_prompts = {
            "comprehensive": f"Effectue une analyse compl√®te et d√©taill√©e de cette image ({filename}). D√©cris tous les √©l√©ments visibles, la composition, les couleurs, le style et le contexte.",
            
            "technical": f"Analyse technique de cette image ({filename}): qualit√©, r√©solution, technique de cr√©ation, aspects techniques remarquables, et suggestions d'optimisation.",
            
            "creative": f"Analyse cr√©ative et artistique de cette image ({filename}): style artistique, cr√©ativit√©, composition esth√©tique, inspiration et potentiel cr√©atif.",
            
            "document": f"Analyse ce document ({filename}) pour extraire toutes les informations textuelles visibles, la structure du document et les √©l√©ments informatifs importants."
        }
        
        return default_prompts.get(analysis_type, default_prompts["comprehensive"])

# Instance globale
vision_interface = VisionInterface()
