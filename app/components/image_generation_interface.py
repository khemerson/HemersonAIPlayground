# app/components/image_generation_interface.py
"""
Interface Chainlit pour g√©n√©ration d'images avec ComfyUI
UX optimis√©e et contr√¥les avanc√©s
"""

import chainlit as cl
from typing import Dict, Any, Optional
import time
import asyncio
import base64
import io
from PIL import Image

from services.image_generation.comfyui_service import comfyui_service

class ImageGenerationInterface:
    """Interface Chainlit pour la g√©n√©ration d'images"""
    
    def __init__(self):
        self.workflows_info = {
            "standard": {
                "emoji": "‚öñÔ∏è",
                "description": "√âquilibre parfait qualit√©/vitesse - Recommand√©",
                "time": "~30s"
            },
            "quality": {
                "emoji": "üíé", 
                "description": "Maximum de qualit√© - Pour vos cr√©ations importantes",
                "time": "~60s"
            },
            "speed": {
                "emoji": "‚ö°",
                "description": "G√©n√©ration rapide - Tests et it√©rations",
                "time": "~15s"
            },
            "artistic": {
                "emoji": "üé®",
                "description": "Focus cr√©ativit√© - Pour l'art num√©rique",
                "time": "~45s"
            },
            "portrait": {
                "emoji": "üë§",
                "description": "Optimis√© portraits - Format vertical",
                "time": "~40s"
            }
        }
        
        self.styles_info = {
            "realistic": {
                "emoji": "üì∏",
                "description": "Photo r√©aliste haute qualit√©"
            },
            "artistic": {
                "emoji": "üé≠",
                "description": "Art num√©rique cr√©atif"
            },
            "fantasy": {
                "emoji": "üßô",
                "description": "Fantasy et fantastique"
            },
            "scifi": {
                "emoji": "üöÄ",
                "description": "Science-fiction futuriste"
            },
            "minimalist": {
                "emoji": "‚ö™",
                "description": "Design √©pur√© minimaliste"
            }
        }
    
    async def handle_image_generation_request(self, prompt: str = None):
        """
        G√®re une demande de g√©n√©ration d'image avec interface interactive
        
        Args:
            prompt: Prompt initial (optionnel)
        """
        try:
            # Si pas de prompt fourni, le demander
            if not prompt:
                prompt_response = await cl.AskUserMessage(
                    content="""üé® **G√©n√©ration d'Image - ComfyUI**

**D√©crivez l'image que vous souhaitez cr√©er** :

üí° **Conseils pour de meilleurs r√©sultats** :
- Soyez sp√©cifique sur les d√©tails
- Mentionnez le style souhait√©
- Pr√©cisez les couleurs, l'√©clairage, la composition
- √âvitez les descriptions trop longues

**Exemples** :
- "Un paysage de montagne au coucher de soleil, style photo r√©aliste"
- "Portrait d'une femme en armure futuriste, art num√©rique"
- "Chat mignon dans un jardin fleuri, style minimaliste"

**Tapez votre description** :""",
                    timeout=60
                ).send()
                
                if not prompt_response or not prompt_response.content:
                    await cl.Message(
                        content="‚è∞ **Timeout** - Aucun prompt re√ßu pour la g√©n√©ration."
                    ).send()
                    return
                
                prompt = prompt_response.content
            
            # Interface de s√©lection des param√®tres
            await self._show_generation_interface(prompt)
            
        except Exception as e:
            await cl.Message(
                content=f"‚ùå **Erreur g√©n√©ration d'image** : {str(e)}"
            ).send()
    
    async def _show_generation_interface(self, prompt: str):
        """Affiche l'interface de s√©lection des param√®tres"""
        
        # Message avec les options de workflow
        workflows_text = "## üõ†Ô∏è Choisissez votre Workflow\n\n"
        for workflow_id, info in self.workflows_info.items():
            workflows_text += f"**{info['emoji']} {workflow_id.title()}** - {info['description']} ({info['time']})\n"
        
        workflows_text += "\n## üé® Styles Disponibles\n\n"
        for style_id, info in self.styles_info.items():
            workflows_text += f"**{info['emoji']} {style_id.title()}** - {info['description']}\n"
        
        # Actions pour les workflows
        workflow_actions = []
        for workflow_id, info in self.workflows_info.items():
            workflow_actions.append(
                cl.Action(
                    name=f"generate_{workflow_id}",
                    label=f"{info['emoji']} {workflow_id.title()}",
                    description=f"{info['description']} ({info['time']})",
                    value={"workflow": workflow_id, "prompt": prompt}
                )
            )
        
        await cl.Message(
            content=f"""üé® **G√©n√©ration d'Image - Configuration**

**Votre prompt** : "{prompt[:100]}{'...' if len(prompt) > 100 else ''}"

{workflows_text}

**üëá S√©lectionnez un workflow pour commencer** :""",
            actions=workflow_actions[:3]  # Limiter √† 3 actions principales
        ).send()
        
        # Actions suppl√©mentaires
        if len(workflow_actions) > 3:
            await cl.Message(
                content="**üîß Workflows Avanc√©s** :",
                actions=workflow_actions[3:]
            ).send()
    
    async def handle_workflow_selection(self, workflow: str, prompt: str, style: str = "artistic"):
        """
        Traite la s√©lection d'un workflow et lance la g√©n√©ration
        
        Args:
            workflow: Workflow s√©lectionn√©
            prompt: Prompt de g√©n√©ration
            style: Style s√©lectionn√©
        """
        try:
            workflow_info = self.workflows_info.get(workflow, self.workflows_info["standard"])
            style_info = self.styles_info.get(style, self.styles_info["artistic"])
            
            # Message de progression avec d√©tails
            progress_message = await cl.Message(
                content=f"""üé® **G√©n√©ration en Cours**

**üéØ Configuration** :
- **Prompt** : "{prompt[:100]}{'...' if len(prompt) > 100 else ''}"
- **Workflow** : {workflow_info['emoji']} {workflow.title()} ({workflow_info['time']})
- **Style** : {style_info['emoji']} {style.title()}
- **GPU** : RTX 4090 (192.168.1.213)

**‚è≥ Statut** : Initialisation du workflow ComfyUI..."""
            ).send()
            
            # Lancer la g√©n√©ration
            start_time = time.time()
            
            result = await comfyui_service.generate_image(
                prompt=prompt,
                workflow=workflow,
                style=style,
                use_cache=True
            )
            
            generation_time = time.time() - start_time
            
            if result["success"]:
                await self._display_successful_generation(result, progress_message, generation_time)
            else:
                await self._display_generation_error(result, progress_message, workflow, style)
                
        except Exception as e:
            await cl.Message(
                content=f"‚ùå **Erreur lors de la g√©n√©ration** : {str(e)}"
            ).send()
    
    async def _display_successful_generation(self, result: Dict[str, Any], progress_message: cl.Message, actual_time: float):
        """Affiche le r√©sultat d'une g√©n√©ration r√©ussie"""
        try:
            # Cr√©er l'√©l√©ment image
            image_element = cl.Image(
                name="generated_image.png",
                content=result["image_data"],
                display="inline"
            )
            
            # Informations d√©taill√©es
            params = result["generation_params"]
            metadata = result["metadata"]
            image_info = result["image_info"]
            
            success_content = f"""
üéâ **Image G√©n√©r√©e avec Succ√®s !**

## üñºÔ∏è R√©sultat
**R√©solution** : {image_info['width']}x{image_info['height']}
**Taille** : {image_info['size_bytes'] / 1024:.1f} KB
**Format** : {image_info['format']}

## ‚öôÔ∏è Configuration Utilis√©e
**Workflow** : {metadata['workflow_name']}
**Style** : {metadata['style_name']}
**Steps** : {params['steps']}
**CFG Scale** : {params['cfg_scale']}
**Sampler** : {params['sampler']}

## ‚ö° Performance
**Temps de g√©n√©ration** : {metadata['generation_time']:.2f}s
**Temps estim√©** : {metadata['estimated_vs_actual']['estimated']}s
**Efficacit√©** : {metadata['estimated_vs_actual']['efficiency']:.1f}x
**Score qualit√©** : {metadata['quality_score']:.2f}/1.0

## üéØ Prompts
**Original** : "{params['prompt']}"
**Enrichi** : "{params['enhanced_prompt'][:200]}..."
**N√©gatif** : "{params['negative_prompt'][:100]}..."

---
üí° **Votre image est pr√™te !** Vous pouvez la t√©l√©charger ou g√©n√©rer une variante.
"""
            
            await progress_message.update(
                content=success_content,
                elements=[image_element]
            )
            
            # Proposer des actions de suivi
            await self._suggest_follow_up_actions(result)
            
        except Exception as e:
            await cl.Message(
                content=f"‚ùå **Erreur affichage r√©sultat** : {str(e)}"
            ).send()
    
    async def _display_generation_error(self, result: Dict[str, Any], progress_message: cl.Message, workflow: str, style: str):
        """Affiche une erreur de g√©n√©ration avec diagnostic"""
        
        error_content = f"""
‚ùå **√âchec de la G√©n√©ration**

**Workflow** : {workflow.title()}
**Style** : {style.title()}
**Erreur** : {result.get('error', 'Erreur inconnue')}
**Temps √©coul√©** : {result.get('generation_time', 0):.2f}s

## üîç Diagnostic
La g√©n√©ration d'image a √©chou√©. Causes possibles :

### üõ†Ô∏è Service ComfyUI
- Service temporairement indisponible
- Queue surcharg√©e
- Mod√®le non charg√©
- Param√®tres incompatibles

### üìù Prompt
- Description trop complexe
- Termes contradictoires
- Prompt trop long ou trop court

### ‚öôÔ∏è Configuration
- R√©solution trop √©lev√©e
- Steps insuffisants ou excessifs
- CFG Scale inadapt√©

## üîß Solutions Recommand√©es

1. **R√©essayez** avec le workflow "Speed" (plus rapide)
2. **Simplifiez le prompt** (description plus directe)
3. **Attendez quelques minutes** (queue possiblement surcharg√©e)
4. **Changez de style** (certains styles sont plus stables)

**üí° Le workflow "Standard" avec style "Artistic" offre la meilleure stabilit√©.**
"""
        
        await progress_message.update(content=error_content)
        
        # Actions de r√©cup√©ration
        retry_actions = [
            cl.Action(
                name="retry_speed",
                label="üöÄ R√©essayer (Rapide)",
                description="Workflow Speed avec param√®tres optimis√©s",
                value={"retry": True, "workflow": "speed"}
            ),
            cl.Action(
                name="retry_standard",
                label="‚öñÔ∏è R√©essayer (Standard)", 
                description="Workflow Standard stable",
                value={"retry": True, "workflow": "standard"}
            )
        ]
        
        await cl.Message(
            content="üîÑ **Options de R√©cup√©ration** :",
            actions=retry_actions
        ).send()
    
    async def _suggest_follow_up_actions(self, result: Dict[str, Any]):
        """Sugg√®re des actions de suivi apr√®s g√©n√©ration r√©ussie"""
        
        params = result["generation_params"]
        
        follow_up_actions = [
            cl.Action(
                name="generate_variation",
                label="üé≤ G√©n√©rer une Variante",
                description="M√™me prompt avec seed diff√©rent",
                value={"variation": True, "base_prompt": params["prompt"]}
            ),
            cl.Action(
                name="enhance_quality",
                label="üíé Version Haute Qualit√©",
                description="M√™me image avec workflow Quality",
                value={"enhance": True, "prompt": params["prompt"]}
            ),
            cl.Action(
                name="try_different_style",
                label="üé® Autre Style",
                description="M√™me prompt, style diff√©rent",
                value={"restyle": True, "prompt": params["prompt"]}
            )
        ]
        
        await cl.Message(
            content="‚ú® **Que souhaitez-vous faire ensuite ?**",
            actions=follow_up_actions
        ).send()
    
    async def handle_batch_generation(self, prompts: List[str], workflow: str = "standard", style: str = "artistic"):
        """
        G√©n√©ration d'images par batch (multiple prompts)
        
        Args:
            prompts: Liste de prompts
            workflow: Workflow √† utiliser
            style: Style √† appliquer
        """
        try:
            if len(prompts) > 5:
                await cl.Message(
                    content="‚ùå **Limite d√©pass√©e** - Maximum 5 images par batch."
                ).send()
                return
            
            batch_progress = await cl.Message(
                content=f"""üé® **G√©n√©ration Batch D√©marr√©e**

**Nombre d'images** : {len(prompts)}
**Workflow** : {workflow.title()}
**Style** : {style.title()}

**‚è≥ Statut** : Pr√©paration du batch..."""
            ).send()
            
            results = []
            
            for i, prompt in enumerate(prompts):
                await batch_progress.update(
                    content=f"""üé® **G√©n√©ration Batch en Cours**

**Image {i+1}/{len(prompts)}**
**Prompt** : "{prompt[:50]}..."
**‚è≥ Statut** : G√©n√©ration en cours..."""
                )
                
                result = await comfyui_service.generate_image(
                    prompt=prompt,
                    workflow=workflow,
                    style=style,
                    use_cache=True
                )
                
                results.append((prompt, result))
                
                # Pause entre g√©n√©rations pour √©viter la surcharge
                if i < len(prompts) - 1:
                    await asyncio.sleep(2)
            
            # Afficher tous les r√©sultats
            await self._display_batch_results(results, batch_progress)
            
        except Exception as e:
            await cl.Message(
                content=f"‚ùå **Erreur g√©n√©ration batch** : {str(e)}"
            ).send()
    
    async def _display_batch_results(self, results: List[Tuple[str, Dict[str, Any]]], progress_message: cl.Message):
        """Affiche les r√©sultats d'une g√©n√©ration batch"""
        
        successful_results = [r for r in results if r[1]["success"]]
        failed_results = [r for r in results if not r[1]["success"]]
        
        # R√©sum√© du batch
        summary_content = f"""
üéØ **G√©n√©ration Batch Termin√©e**

**‚úÖ R√©ussies** : {len(successful_results)}/{len(results)}
**‚ùå √âchou√©es** : {len(failed_results)}/{len(results)}
**üìä Taux de succ√®s** : {len(successful_results)/len(results)*100:.1f}%

---
"""
        
        await progress_message.update(content=summary_content)
        
        # Afficher les images r√©ussies
        if successful_results:
            image_elements = []
            
            for i, (prompt, result) in enumerate(successful_results):
                if result.get("image_data"):
                    image_element = cl.Image(
                        name=f"batch_image_{i+1}.png",
                        content=result["image_data"],
                        display="inline"
                    )
                    image_elements.append(image_element)
            
            if image_elements:
                await cl.Message(
                    content=f"üñºÔ∏è **Images G√©n√©r√©es** ({len(image_elements)}/{len(results)})",
                    elements=image_elements
                ).send()
        
        # Afficher les erreurs
        if failed_results:
            error_details = "‚ùå **Images √âchou√©es** :\n\n"
            for prompt, result in failed_results:
                error_details += f"- \"{prompt[:50]}...\" : {result.get('error', 'Erreur inconnue')}\n"
            
            await cl.Message(content=error_details).send()
    
    async def show_generation_gallery(self):
        """Affiche une galerie d'exemples de g√©n√©rations"""
        
        gallery_content = """
üñºÔ∏è **Galerie d'Exemples - ComfyUI**

## üé® Inspirez-vous de ces exemples

### üì∏ R√©aliste
- "Portrait d'une femme aux cheveux roux, √©clairage naturel, photo studio"
- "Paysage de montagne avec lac, reflets dor√©s, coucher de soleil"
- "Architecture moderne, lignes √©pur√©es, perspective urbaine"

### üé≠ Artistique  
- "Chat cosmique aux yeux √©toil√©s, art num√©rique surr√©aliste"
- "For√™t enchant√©e avec lumi√®res magiques, style fantasy"
- "Robot steampunk dans un atelier vintage, d√©tails m√©caniques"

### üöÄ Science-Fiction
- "Vaisseau spatial futuriste, n√©ons bleus, environnement spatial"
- "Cityscape cyberpunk, pluie n√©on, ambiance nocturne"
- "Armure high-tech, mat√©riaux r√©fl√©chissants, design futuriste"

### ‚ö™ Minimaliste
- "Logo simple et √©l√©gant, formes g√©om√©triques, palette monochrome" 
- "Architecture √©pur√©e, lignes nettes, espaces vides"
- "Nature morte minimaliste, objets simples, √©clairage doux"

## üí° Conseils pour Vos Prompts

**‚úÖ Bon prompt** :
- Sp√©cifique et descriptif
- Mentionne le style souhait√©
- Inclut des d√©tails sur l'√©clairage
- Pr√©cise les couleurs importantes

**‚ùå √Ä √©viter** :
- Descriptions trop vagues
- Prompts contradictoires
- Texte trop long (>200 mots)
- Demandes impossibles

**üöÄ Commencez par un prompt simple et ajoutez progressivement des d√©tails !**
"""
        
        await cl.Message(content=gallery_content).send()

# Instance globale
image_gen_interface = ImageGenerationInterface()
