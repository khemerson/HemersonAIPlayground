# app/components/audio_interface.py
"""
Interface Chainlit pour Pipeline Audio
Optimis√©e pour UX et performances
"""

import chainlit as cl
from typing import Dict, Any
import time
import base64
import io

from services.audio.audio_pipeline import AudioPipelineService

class AudioInterface:
    """Interface Chainlit pour le pipeline audio"""
    
    def __init__(self, audio_pipeline: AudioPipelineService):
        self.audio_pipeline = audio_pipeline
    
    async def handle_audio_upload(self, audio_element: cl.Audio, message_content: str = None):
        """
        Traite un fichier audio upload√© avec interface progressive
        
        Args:
            audio_element: √âl√©ment audio Chainlit
            message_content: Message associ√© √©ventuel
        """
        try:
            # Validation du fichier audio
            if not self._validate_audio_file(audio_element):
                await cl.Message(
                    content="‚ùå **Fichier audio invalide**\n\nFormats support√©s : WAV, MP3, M4A\nTaille max : 25MB\nDur√©e max : 5 minutes"
                ).send()
                return
            
            # D√©terminer le mode d'analyse
            analysis_mode = self._determine_analysis_mode(message_content)
            
            # Interface de progression avec √©tapes
            progress_message = await cl.Message(
                content=f"üéµ **Pipeline Audio D√©marr√©**\n\n**Fichier** : {audio_element.name}\n**Mode** : {analysis_mode.title()}\n**Statut** : Initialisation..."
            ).send()
            
            # √âtape 1 : Transcription
            await progress_message.update(
                content=f"üéµ **Pipeline Audio en Cours**\n\n**Fichier** : {audio_element.name}\n**Mode** : {analysis_mode.title()}\n\n1Ô∏è‚É£ **Transcription** : En cours avec Whisper V3...\n2Ô∏è‚É£ **Traitement IA** : En attente\n3Ô∏è‚É£ **Synth√®se** : En attente"
            )
            
            # Lancer le pipeline complet
            result = await self.audio_pipeline.process_complete_pipeline(
                audio_data=audio_element.content,
                filename=audio_element.name,
                analysis_mode=analysis_mode,
                response_voice="female",  # Param√®tre par d√©faut
                language="fr"
            )
            
            if result["success"]:
                await self._display_pipeline_success(result, progress_message)
            else:
                await self._display_pipeline_error(result, progress_message)
                
        except Exception as e:
            await cl.Message(
                content=f"‚ùå **Erreur Pipeline Audio**\n\n{str(e)}\n\nVeuillez r√©essayer avec un autre fichier."
            ).send()
    
    async def _display_pipeline_success(self, result: Dict[str, Any], progress_message: cl.Message):
        """Affiche le r√©sultat d'un pipeline r√©ussi"""
        
        # Cr√©er l'√©l√©ment audio de r√©ponse
        response_audio = cl.Audio(
            name="response_audio.wav",
            content=result["response_audio"],
            display="inline"
        )
        
        # M√©triques de performance
        metrics = result["performance_metrics"]
        quality = result["quality_indicators"]
        
        # Message de succ√®s d√©taill√©
        success_content = f"""
üéâ **Pipeline Audio Termin√© avec Succ√®s !**

## üìù Transcription
**Texte reconnu** : "{result['transcription'][:200]}{'...' if len(result['transcription']) > 200 else ''}"
**Confiance** : {metrics['transcription_confidence']:.1%}
**Dur√©e** : {metrics.get('transcription_time', 0):.2f}s

## ü§ñ R√©ponse IA ({result['analysis_mode'].title()})
**R√©ponse** : "{result['ai_response'][:200]}{'...' if len(result['ai_response']) > 200 else ''}"
**Temps de traitement** : {metrics.get('ai_processing_time', 0):.2f}s

## üîä Synth√®se Vocale
**Voix** : {result['voice'].title()}
**Taille audio** : {metrics['response_audio_size'] / 1024:.1f} KB
**Temps** : {metrics.get('synthesis_time', 0):.2f}s

## ‚ö° Performance Globale
**Temps total** : {metrics['total_time']:.2f}s
**Efficacit√©** : {quality['pipeline_efficiency'].title()}
**Qualit√© transcription** : {quality.get('transcription_quality', {}).get('quality', 'unknown').title()}

---
*√âcoutez la r√©ponse audio ci-dessous* üëá
"""
        
        # Mettre √† jour le message de progression
        await progress_message.update(content=success_content, elements=[response_audio])
        
        # Message s√©par√© pour la transcription compl√®te si longue
        if len(result['transcription']) > 200:
            await cl.Message(
                content=f"üìú **Transcription Compl√®te**\n\n{result['transcription']}"
            ).send()
        
        # R√©ponse IA compl√®te si longue
        if len(result['ai_response']) > 200:
            await cl.Message(
                content=f"ü§ñ **R√©ponse IA Compl√®te**\n\n{result['ai_response']}"
            ).send()
    
    async def _display_pipeline_error(self, result: Dict[str, Any], progress_message: cl.Message):
        """Affiche les erreurs du pipeline avec diagnostic"""
        
        error_content = f"""
‚ùå **Erreur Pipeline Audio**

**√âtape √©chou√©e** : {result.get('step_failed', 'Inconnue')}
**Erreur** : {result.get('error', 'Erreur inconnue')}
**Temps √©coul√©** : {result.get('total_time', 0):.2f}s

## üîç Diagnostic
"""
        
        # Ajouter des informations selon l'√©tape qui a √©chou√©
        if result.get('step_failed') == 'transcription':
            error_content += """
La transcription audio a √©chou√©. Causes possibles :
- Format audio non support√©
- Fichier audio corrompu  
- Service Whisper temporairement indisponible
- Fichier trop long (> 5 minutes)

**üîß Solutions** :
- V√©rifiez le format (WAV recommand√©)
- R√©duisez la dur√©e du fichier
- R√©essayez dans quelques instants
"""
        elif result.get('step_failed') == 'ai_processing':
            error_content += f"""
Le traitement IA a √©chou√© apr√®s transcription r√©ussie.

**Transcription obtenue** : "{result.get('transcription', 'Non disponible')[:200]}..."

**üîß Solutions** :
- Le service IA est peut-√™tre surcharg√©
- R√©essayez avec un message plus court
"""
        elif result.get('step_failed') == 'speech_synthesis':
            error_content += f"""
La synth√®se vocale a √©chou√©.

**Transcription** : "{result.get('transcription', 'Non disponible')[:100]}..."
**R√©ponse IA** : "{result.get('ai_response', 'Non disponible')[:100]}..."

**üîß Solutions** :
- Service TTS temporairement indisponible
- Texte trop long pour la synth√®se
- R√©essayez dans quelques instants
"""
        
        await progress_message.update(content=error_content)
    
    def _validate_audio_file(self, audio_element: cl.Audio) -> bool:
        """Valide un fichier audio"""
        try:
            # V√©rifier la taille (25MB max)
            if len(audio_element.content) > 25 * 1024 * 1024:
                return False
            
            # V√©rifier les formats support√©s
            supported_formats = ['.wav', '.mp3', '.m4a', '.ogg']
            file_extension = audio_element.name.lower().split('.')[-1]
            
            if f'.{file_extension}' not in supported_formats:
                return False
            
            # Validation basique du contenu
            if len(audio_element.content) < 1024:  # Trop petit
                return False
            
            return True
            
        except Exception:
            return False
    
    def _determine_analysis_mode(self, message_content: str) -> str:
        """D√©termine le mode d'analyse bas√© sur le message"""
        if not message_content:
            return "conversational"
        
        message_lower = message_content.lower()
        
        if any(keyword in message_lower for keyword in ['cogito', 'analyse', 'r√©fl√©chis', 'approfondis']):
            return "cogito"
        elif any(keyword in message_lower for keyword in ['expert', 'technique', 'professionnel', 'sp√©cialis√©']):
            return "expert"
        else:
            return "conversational"
